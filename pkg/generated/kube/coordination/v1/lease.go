// Code generated by xns-informer-gen. DO NOT EDIT.

package v1

import (
	xnsinformers "github.com/maistra/xns-informer/pkg/informers"
	v1 "k8s.io/api/coordination/v1"
	informers "k8s.io/client-go/informers/coordination/v1"
	listers "k8s.io/client-go/listers/coordination/v1"
	"k8s.io/client-go/tools/cache"
)

type leaseInformer struct {
	informer cache.SharedIndexInformer
}

var _ informers.LeaseInformer = &leaseInformer{}

func NewLeaseInformer(f xnsinformers.SharedInformerFactory) informers.LeaseInformer {
	resource := v1.SchemeGroupVersion.WithResource("leases")
	converter := xnsinformers.NewListWatchConverter(
		f.GetScheme(),
		&v1.Lease{},
		&v1.LeaseList{},
	)

	informer := f.ForResource(resource, xnsinformers.ResourceOptions{
		ClusterScoped:      false,
		ListWatchConverter: converter,
	})

	return &leaseInformer{informer: informer.Informer()}
}

func (i *leaseInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *leaseInformer) Lister() listers.LeaseLister {
	return listers.NewLeaseLister(i.informer.GetIndexer())
}
